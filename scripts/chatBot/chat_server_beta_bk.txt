from flask import Flask, request, jsonify, send_from_directory
import pandas as pd
import os
from datetime import datetime

app = Flask(__name__)

# CSV 및 이미지 폴더 설정
CSV_PATH = '../../data/llm_classified_results.csv'
IMAGE_FOLDER = os.path.abspath('../../data/images')
NGROK_BASE_URL = 'https://db19ce61487b.ngrok-free.app'

# CSV 불러오기
df = pd.read_csv(CSV_PATH)

# deadline 파싱 함수
def parse_deadline(value):
    if pd.isna(value):
        return None
    s = str(value).strip()
    if '해당' in s or '한 달' in s:
        return None
    if '~' in s:
        s = s.split('~')[-1].strip()  # 종료일 기준
    s = s.replace('.', '-').replace(' ', '')
    return pd.to_datetime(s, errors='coerce')

# 날짜 파싱
df['deadline'] = df['deadline'].apply(parse_deadline)

@app.route('/images/<path:filename>')
def serve_image(filename):
    return send_from_directory(IMAGE_FOLDER, filename)

@app.route('/message', methods=['POST'])
def message():
    data = request.get_json()
    print("DEBUG DATA:", data)

    # 1. skillData 우선 처리
    skill_data = data.get('skillData', {})
    topic = skill_data.get('topic')
    department = skill_data.get('department')
    sort_option = skill_data.get('sort')

    # 2. utterance 처리
    if not topic or not department:
        utterance = (
            data.get('userRequest', {}).get('utterance')
            or data.get('action', {}).get('params', {}).get('utterance', '')
        ).strip()

        parts = [s.strip() for s in utterance.split(',')]
        if len(parts) < 2:
            return jsonify({
                "version": "2.0",
                "template": {
                    "outputs": [
                        {
                            "simpleText": {
                                "text": "입력 형식은 '주제, 학과, 정렬옵션'처럼 콤마로 구분해주세요.\n예: 공모전, 컴퓨터공학과, 마감순"
                            }
                        }
                    ]
                }
            })
        topic = parts[0]
        department = parts[1]
        sort_option = parts[2] if len(parts) >= 3 else '마감순'

    # CSV 컬럼 체크
    if 'department' not in df.columns or 'topic' not in df.columns or 'deadline' not in df.columns:
        return jsonify({
            "version": "2.0",
            "template": {
                "outputs": [
                    {
                        "simpleText": {
                            "text": "'department', 'topic', 'deadline' 열이 CSV에 존재하는지 확인해주세요."
                        }
                    }
                ]
            }
        })

    today = pd.to_datetime(datetime.today().date())

    # 정규화
    topic = topic.replace(' ', '').lower()
    department = department.replace(' ', '').lower()

    df['정규과'] = df['department'].fillna('').str.replace(' ', '').str.lower()
    df['정규토픽'] = df['topic'].fillna('').str.replace(' ', '').str.lower()

    # 매칭
    matches = df[
        df['정규토픽'].str.contains(topic, na=False) &
        df['정규과'].str.contains(department.replace('과', '')[:2], na=False) &
        (df['deadline'].isna() | (df['deadline'] >= today))
    ]

    # 정렬
    if sort_option == '마감순':
        matches = matches.sort_values(by='deadline', ascending=True, na_position='last')
    elif sort_option == '최신순':
        matches = matches.sort_values(by='deadline', ascending=False, na_position='last')
    elif sort_option == '오래된순':
        matches = matches.sort_values(by='deadline', ascending=True, na_position='last')

    if matches.empty:
        return jsonify({
            "version": "2.0",
            "template": {
                "outputs": [
                    {
                        "simpleText": {
                            "text": f"'{topic}, {department}' 관련 마감 기한이 지난 정보이거나 검색 결과가 없습니다."
                        }
                    }
                ]
            }
        })

    # 카드 생성
    cards = []
    default_image = f"{NGROK_BASE_URL}/images/default.png" 
    for _, row in matches.head(3).iterrows():
        title = row['title']
        one_line = row['one_line'] if pd.notna(row['one_line']) else '요약 없음'
        deadline = row['deadline'].strftime('%Y-%m-%d') if pd.notna(row['deadline']) else '정보 없음'
        description = f"마감일: {deadline}\n요약: {one_line}"

        link = row['detail_link']
        raw_path = row['imageUrl']
        image_url = f"{NGROK_BASE_URL}/images/{os.path.basename(raw_path)}" if pd.notna(raw_path) and raw_path else None
            
        if pd.notna(raw_path) and raw_path:
            image_url = f"{NGROK_BASE_URL}/images/{os.path.basename(raw_path)}"
        else:
            image_url = default_image
        card = {
            "title": title,
            "description": description,
            "thumbnail": {"imageUrl": image_url} if image_url else {},
            "buttons": [
                {
                    "action": "webLink",
                    "label": "자세히 보기",
                    "webLinkUrl": link
                }
            ]
        }
        cards.append(card)

    return jsonify({
        "version": "2.0",
        "template": {
            "outputs": [
                {
                    "carousel": {
                        "type": "basicCard",
                        "items": cards
                    }
                }
            ]
        }
    })

if __name__ == '__main__':
    app.run(port=5000)
